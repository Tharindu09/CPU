$date
	Wed May 08 11:20:29 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var wire 32 " INSTRUCTION [31:0] $end
$var reg 1 # CLK $end
$var reg 1 $ RESET $end
$var integer 32 % i [31:0] $end
$scope module mycpu $end
$var wire 1 # CLK $end
$var wire 32 & INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 3 ' writereg [2:0] $end
$var wire 1 ( write_enable $end
$var wire 8 ) regout2_negative [7:0] $end
$var wire 8 * regout2 [7:0] $end
$var wire 8 + regout1 [7:0] $end
$var wire 1 , reg2_sign_sel $end
$var wire 8 - reg2_mux_out [7:0] $end
$var wire 3 . readreg2 [2:0] $end
$var wire 3 / readreg1 [2:0] $end
$var wire 8 0 oprend2 [7:0] $end
$var wire 8 1 opcode [7:0] $end
$var wire 1 2 op2_sel $end
$var wire 8 3 immediate [7:0] $end
$var wire 8 4 aluresult [7:0] $end
$var wire 3 5 aluop [2:0] $end
$var wire 32 6 PC [31:0] $end
$scope module cpu_alu $end
$var wire 3 7 select [2:0] $end
$var wire 8 8 orOut [7:0] $end
$var wire 8 9 forwardOut [7:0] $end
$var wire 8 : data2 [7:0] $end
$var wire 8 ; data1 [7:0] $end
$var wire 8 < andOut [7:0] $end
$var wire 8 = addOut [7:0] $end
$var reg 8 > aluResult [7:0] $end
$scope module add1 $end
$var wire 8 ? out [7:0] $end
$var wire 8 @ data2 [7:0] $end
$var wire 8 A data1 [7:0] $end
$upscope $end
$scope module and1 $end
$var wire 8 B out [7:0] $end
$var wire 8 C data2 [7:0] $end
$var wire 8 D data1 [7:0] $end
$upscope $end
$scope module f $end
$var wire 8 E out [7:0] $end
$var wire 8 F data2 [7:0] $end
$upscope $end
$scope module or1 $end
$var wire 8 G out [7:0] $end
$var wire 8 H data2 [7:0] $end
$var wire 8 I data1 [7:0] $end
$upscope $end
$upscope $end
$scope module cpu_compliment $end
$var wire 8 J OUT [7:0] $end
$var wire 8 K IN [7:0] $end
$upscope $end
$scope module cpu_control $end
$var wire 8 L OPCODE [7:0] $end
$var reg 3 M ALUOP [2:0] $end
$var reg 1 2 OP2_SEL $end
$var reg 1 , REG2_SIGN_SEL $end
$var reg 1 ( WRITE_ENABLE $end
$upscope $end
$scope module cpu_mux1 $end
$var wire 8 N IN1 [7:0] $end
$var wire 1 , SELECT $end
$var wire 8 O IN0 [7:0] $end
$var reg 8 P OUT [7:0] $end
$upscope $end
$scope module cpu_mux2 $end
$var wire 8 Q IN0 [7:0] $end
$var wire 8 R IN1 [7:0] $end
$var wire 1 2 SELECT $end
$var reg 8 S OUT [7:0] $end
$upscope $end
$scope module cpu_pc $end
$var wire 1 # CLK $end
$var wire 1 $ RESET $end
$var wire 32 T PC_4 [31:0] $end
$var reg 32 U PC [31:0] $end
$scope module adder $end
$var wire 32 V CURRENT_PC [31:0] $end
$var wire 32 W PC_4 [31:0] $end
$upscope $end
$upscope $end
$scope module cpu_reg $end
$var wire 1 # CLK $end
$var wire 8 X IN [7:0] $end
$var wire 3 Y INADDRESS [2:0] $end
$var wire 8 Z OUT1 [7:0] $end
$var wire 3 [ OUT1ADDRESS [2:0] $end
$var wire 8 \ OUT2 [7:0] $end
$var wire 3 ] OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 ( WRITE $end
$var integer 32 ^ i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module cpu_reg $end
$var reg 8 _ \register[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module cpu_reg $end
$var reg 8 ` \register[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module cpu_reg $end
$var reg 8 a \register[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module cpu_reg $end
$var reg 8 b \register[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module cpu_reg $end
$var reg 8 c \register[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module cpu_reg $end
$var reg 8 d \register[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module cpu_reg $end
$var reg 8 e \register[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module cpu_reg $end
$var reg 8 f \register[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
x2
bx 1
bx 0
bx /
bx .
bx -
x,
bx +
bx *
bx )
x(
bx '
bx &
b1000 %
1$
0#
bx "
bx !
$end
#4
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b1000 ^
1#
#5
b0 !
b0 6
b0 U
b0 V
0$
#6
b100 T
b100 W
#7
b101 0
b101 :
b101 @
b101 C
b101 F
b101 H
b101 S
b0 1
b0 L
b101 3
b101 R
b0 /
b0 [
b101 .
b101 ]
b100 '
b100 Y
b1000000000000000101 "
b1000000000000000101 &
#8
b101 4
b101 >
b101 X
bx1x1 8
bx1x1 G
b0x0x <
b0x0x B
1(
b0 5
b0 7
b0 M
12
b101 9
b101 E
0#
#9
b0 +
b0 ;
b0 A
b0 D
b0 I
b0 Z
b0 *
b0 K
b0 O
b0 \
#10
b0 -
b0 P
b0 Q
b101 8
b101 G
b0 <
b0 B
b0 )
b0 J
b0 N
#11
b101 =
b101 ?
#12
1#
#13
b101 c
b100 !
b100 6
b100 U
b100 V
#14
b1000 T
b1000 W
#15
b1001 0
b1001 :
b1001 @
b1001 C
b1001 F
b1001 H
b1001 S
b1001 3
b1001 R
b1 .
b1 ]
b10 '
b10 Y
b100000000000001001 "
b100000000000001001 &
#16
b1001 4
b1001 >
b1001 X
b1001 8
b1001 G
b1001 9
b1001 E
0#
#17
b1001 =
b1001 ?
#20
1#
#21
b1001 a
b1000 !
b1000 6
b1000 U
b1000 V
#22
b1100 T
b1100 W
#23
b10 0
b10 :
b10 @
b10 C
b10 F
b10 H
b10 S
b10 1
b10 L
b10 3
b10 R
b100 /
b100 [
b10 .
b10 ]
b110 '
b110 Y
b10000001100000010000000010 "
b10000001100000010000000010 &
#24
b0 0
b0 :
b0 @
b0 C
b0 F
b0 H
b0 S
b10 8
b10 G
b1 5
b1 7
b1 M
0,
02
b10 9
b10 E
0#
#25
b1001 0
b1001 :
b1001 @
b1001 C
b1001 F
b1001 H
b1001 S
b1001 -
b1001 P
b1001 Q
b0 8
b0 G
b0 9
b0 E
b101 +
b101 ;
b101 A
b101 D
b101 I
b101 Z
b1001 *
b1001 K
b1001 O
b1001 \
#26
b1 <
b1 B
b1001 9
b1001 E
b1101 8
b1101 G
b11110111 )
b11110111 J
b11110111 N
#27
b1110 4
b1110 >
b1110 X
b1110 =
b1110 ?
#28
1#
#29
b1110 e
b1100 !
b1100 6
b1100 U
b1100 V
#30
b10000 T
b10000 W
#31
b11 1
b11 L
b100 3
b100 R
b10 /
b10 [
b100 .
b100 ]
b111 '
b111 Y
b11000001110000001000000100 "
b11000001110000001000000100 &
#32
b11110111 0
b11110111 :
b11110111 @
b11110111 C
b11110111 F
b11110111 H
b11110111 S
b11110111 -
b11110111 P
b11110111 Q
1,
0#
#33
b11110111 8
b11110111 G
b101 <
b101 B
b11110111 9
b11110111 E
b1001 +
b1001 ;
b1001 A
b1001 D
b1001 I
b1001 Z
b101 *
b101 K
b101 O
b101 \
#34
b11111011 0
b11111011 :
b11111011 @
b11111011 C
b11111011 F
b11111011 H
b11111011 S
b11111011 -
b11111011 P
b11111011 Q
b11111111 8
b11111111 G
b1 <
b1 B
b11111011 )
b11111011 J
b11111011 N
#35
b11111011 8
b11111011 G
b1001 <
b1001 B
b11111011 9
b11111011 E
#36
b100 4
b100 >
b100 X
b100 =
b100 ?
1#
#37
b100 f
b10000 !
b10000 6
b10000 U
b10000 V
#38
b10100 T
b10100 W
#39
b100 1
b100 L
b10 3
b10 R
b100 /
b100 [
b10 .
b10 ]
b11 '
b11 Y
b100000000110000010000000010 "
b100000000110000010000000010 &
#40
b101 0
b101 :
b101 @
b101 C
b101 F
b101 H
b101 S
b1001 4
b1001 >
b1001 X
b101 -
b101 P
b101 Q
b10 5
b10 7
b10 M
0,
0#
#41
b1001 0
b1001 :
b1001 @
b1001 C
b1001 F
b1001 H
b1001 S
b1 4
b1 >
b1 X
b1001 -
b1001 P
b1001 Q
b1101 8
b1101 G
b1 <
b1 B
b101 9
b101 E
b101 +
b101 ;
b101 A
b101 D
b101 I
b101 Z
b1001 *
b1001 K
b1001 O
b1001 \
#42
b1001 9
b1001 E
b11110111 )
b11110111 J
b11110111 N
#43
b1110 =
b1110 ?
#44
1#
#45
b1 b
b10100 !
b10100 6
b10100 U
b10100 V
#46
b11000 T
b11000 W
#47
b101 1
b101 L
b101 '
b101 Y
b101000001010000010000000010 "
b101000001010000010000000010 &
#48
b1101 4
b1101 >
b1101 X
b11 5
b11 7
b11 M
0#
#52
1#
#53
b1101 d
b11000 !
b11000 6
b11000 U
b11000 V
#54
b11100 T
b11100 W
#55
bx 1
bx L
bx 3
bx R
bx /
bx [
bx .
bx ]
bx '
bx Y
bx "
bx &
#56
0#
#57
bx 0
bx :
bx @
bx C
bx F
bx H
bx S
bx -
bx P
bx Q
bx +
bx ;
bx A
bx D
bx I
bx Z
bx *
bx K
bx O
bx \
#58
bx 4
bx >
bx X
bx 9
bx E
bx 8
bx G
bx <
bx B
bx )
bx J
bx N
#59
bx =
bx ?
#60
1#
#61
b11100 !
b11100 6
b11100 U
b11100 V
#62
b100000 T
b100000 W
#64
0#
#68
1#
#69
b100000 !
b100000 6
b100000 U
b100000 V
#70
b100100 T
b100100 W
#72
0#
#76
1#
#77
b100100 !
b100100 6
b100100 U
b100100 V
#78
b101000 T
b101000 W
#80
0#
#84
1#
#85
b101000 !
b101000 6
b101000 U
b101000 V
#86
b101100 T
b101100 W
#88
0#
#92
1#
#93
b101100 !
b101100 6
b101100 U
b101100 V
#94
b110000 T
b110000 W
#96
0#
#100
1#
#101
b110000 !
b110000 6
b110000 U
b110000 V
#102
b110100 T
b110100 W
#104
0#
#105
